type Transaction @entity {
  id: ID! 
  from: Bytes!
  to: Bytes!
  action: String!
  type: String!
  sent: BigInt
  received: BigInt
  fee: BigInt
  block: BigInt
  token: Token!
}

type User @entity {
  id: ID!
  address: Bytes!
  transactions: BigInt
}

type UserBalance @entity {
  id: ID!
  user: User!
  token: Token!
  amount: BigDecimal!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  miningToken: Bytes!
  reserveToken: Bytes!
  stakesToken: Bytes!
  underlyingToken: Bytes!

  totalSupply: BigInt!
  totalReserve: BigInt!
  depositFee: BigInt!
  withdrawalFee: BigInt!

  lastDelta: BigDecimal!
  countTokenDailyDatas: Int!
  cumulativeDailyChange: BigDecimal!
  tokenDailyDatas: [TokenDailyData!]! @derivedFrom(field: "token")
}

type TokenDailyData @entity {
  id: ID!
  date: Int!
  token: Token!

  avgPrice: BigDecimal!
  avgUnderlyingPrice: BigDecimal!
  currentPrice: BigDecimal!
  currentEthPrice: BigDecimal!

  mintTotalSent: BigInt!
  mintTotalReceived: BigInt!
  
  redeemTotalSent: BigInt!
  redeemTotalReceived: BigInt!

  txCount: BigInt!
}

type DailyData @entity {
  id: ID!
  date: Int!

  dailyUSDVolume: BigDecimal!
  dailyETHVolume: BigDecimal!

  totalValueLockedUSD: BigDecimal!
  totalValueLockedETH: BigDecimal!
  cumulativeTotalValueLockedUSD: BigDecimal!
  cumulativeTotalValueLockedETH: BigDecimal!

  txCount: BigInt!
}

type TotalValueLocked @entity {
  id: ID!
  totalValueLockedETH: BigDecimal!
  totalValueLockedUSD: BigDecimal!
}