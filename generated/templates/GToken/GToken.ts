// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurnLiquidityPoolPortion extends ethereum.Event {
  get params(): BurnLiquidityPoolPortion__Params {
    return new BurnLiquidityPoolPortion__Params(this);
  }
}

export class BurnLiquidityPoolPortion__Params {
  _event: BurnLiquidityPoolPortion;

  constructor(event: BurnLiquidityPoolPortion) {
    this._event = event;
  }

  get _stakesAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CancelLiquidityPoolMigration extends ethereum.Event {
  get params(): CancelLiquidityPoolMigration__Params {
    return new CancelLiquidityPoolMigration__Params(this);
  }
}

export class CancelLiquidityPoolMigration__Params {
  _event: CancelLiquidityPoolMigration;

  constructor(event: CancelLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CompleteLiquidityPoolMigration extends ethereum.Event {
  get params(): CompleteLiquidityPoolMigration__Params {
    return new CompleteLiquidityPoolMigration__Params(this);
  }
}

export class CompleteLiquidityPoolMigration__Params {
  _event: CompleteLiquidityPoolMigration;

  constructor(event: CompleteLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _stakesAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateLiquidityPoolMigration extends ethereum.Event {
  get params(): InitiateLiquidityPoolMigration__Params {
    return new InitiateLiquidityPoolMigration__Params(this);
  }
}

export class InitiateLiquidityPoolMigration__Params {
  _event: InitiateLiquidityPoolMigration;

  constructor(event: InitiateLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GToken__calcDepositCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcDepositSharesFromCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcDepositSharesFromUnderlyingCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcDepositUnderlyingCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcWithdrawalCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcWithdrawalSharesFromCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcWithdrawalSharesFromUnderlyingCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__calcWithdrawalUnderlyingCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__collateralizationRatioResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__growthGulpRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken__miningGulpRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GToken extends ethereum.SmartContract {
  static bind(address: Address): GToken {
    return new GToken("GToken", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowingReserveUnderlying(): BigInt {
    let result = super.call(
      "borrowingReserveUnderlying",
      "borrowingReserveUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowingReserveUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowingReserveUnderlying",
      "borrowingReserveUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcCostFromUnderlyingCost(
    _underlyingCost: BigInt,
    _exchangeRate: BigInt
  ): BigInt {
    let result = super.call(
      "calcCostFromUnderlyingCost",
      "calcCostFromUnderlyingCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcCostFromUnderlyingCost(
    _underlyingCost: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCostFromUnderlyingCost",
      "calcCostFromUnderlyingCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcDepositCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): GToken__calcDepositCostFromSharesResult {
    let result = super.call(
      "calcDepositCostFromShares",
      "calcDepositCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );

    return new GToken__calcDepositCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): ethereum.CallResult<GToken__calcDepositCostFromSharesResult> {
    let result = super.tryCall(
      "calcDepositCostFromShares",
      "calcDepositCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcDepositCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcDepositSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): GToken__calcDepositSharesFromCostResult {
    let result = super.call(
      "calcDepositSharesFromCost",
      "calcDepositSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );

    return new GToken__calcDepositSharesFromCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): ethereum.CallResult<GToken__calcDepositSharesFromCostResult> {
    let result = super.tryCall(
      "calcDepositSharesFromCost",
      "calcDepositSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcDepositSharesFromCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcDepositSharesFromUnderlyingCost(
    _underlyingCost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt,
    _exchangeRate: BigInt
  ): GToken__calcDepositSharesFromUnderlyingCostResult {
    let result = super.call(
      "calcDepositSharesFromUnderlyingCost",
      "calcDepositSharesFromUnderlyingCost(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new GToken__calcDepositSharesFromUnderlyingCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositSharesFromUnderlyingCost(
    _underlyingCost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<GToken__calcDepositSharesFromUnderlyingCostResult> {
    let result = super.tryCall(
      "calcDepositSharesFromUnderlyingCost",
      "calcDepositSharesFromUnderlyingCost(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcDepositSharesFromUnderlyingCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcDepositUnderlyingCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt,
    _exchangeRate: BigInt
  ): GToken__calcDepositUnderlyingCostFromSharesResult {
    let result = super.call(
      "calcDepositUnderlyingCostFromShares",
      "calcDepositUnderlyingCostFromShares(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new GToken__calcDepositUnderlyingCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositUnderlyingCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<GToken__calcDepositUnderlyingCostFromSharesResult> {
    let result = super.tryCall(
      "calcDepositUnderlyingCostFromShares",
      "calcDepositUnderlyingCostFromShares(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcDepositUnderlyingCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcUnderlyingCostFromCost(_cost: BigInt, _exchangeRate: BigInt): BigInt {
    let result = super.call(
      "calcUnderlyingCostFromCost",
      "calcUnderlyingCostFromCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcUnderlyingCostFromCost(
    _cost: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcUnderlyingCostFromCost",
      "calcUnderlyingCostFromCost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcWithdrawalCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): GToken__calcWithdrawalCostFromSharesResult {
    let result = super.call(
      "calcWithdrawalCostFromShares",
      "calcWithdrawalCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );

    return new GToken__calcWithdrawalCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): ethereum.CallResult<GToken__calcWithdrawalCostFromSharesResult> {
    let result = super.tryCall(
      "calcWithdrawalCostFromShares",
      "calcWithdrawalCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcWithdrawalCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcWithdrawalSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): GToken__calcWithdrawalSharesFromCostResult {
    let result = super.call(
      "calcWithdrawalSharesFromCost",
      "calcWithdrawalSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );

    return new GToken__calcWithdrawalSharesFromCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): ethereum.CallResult<GToken__calcWithdrawalSharesFromCostResult> {
    let result = super.tryCall(
      "calcWithdrawalSharesFromCost",
      "calcWithdrawalSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcWithdrawalSharesFromCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcWithdrawalSharesFromUnderlyingCost(
    _underlyingCost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt,
    _exchangeRate: BigInt
  ): GToken__calcWithdrawalSharesFromUnderlyingCostResult {
    let result = super.call(
      "calcWithdrawalSharesFromUnderlyingCost",
      "calcWithdrawalSharesFromUnderlyingCost(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new GToken__calcWithdrawalSharesFromUnderlyingCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalSharesFromUnderlyingCost(
    _underlyingCost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<GToken__calcWithdrawalSharesFromUnderlyingCostResult> {
    let result = super.tryCall(
      "calcWithdrawalSharesFromUnderlyingCost",
      "calcWithdrawalSharesFromUnderlyingCost(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_underlyingCost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcWithdrawalSharesFromUnderlyingCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcWithdrawalUnderlyingCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt,
    _exchangeRate: BigInt
  ): GToken__calcWithdrawalUnderlyingCostFromSharesResult {
    let result = super.call(
      "calcWithdrawalUnderlyingCostFromShares",
      "calcWithdrawalUnderlyingCostFromShares(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new GToken__calcWithdrawalUnderlyingCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalUnderlyingCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt,
    _exchangeRate: BigInt
  ): ethereum.CallResult<GToken__calcWithdrawalUnderlyingCostFromSharesResult> {
    let result = super.tryCall(
      "calcWithdrawalUnderlyingCostFromShares",
      "calcWithdrawalUnderlyingCostFromShares(uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__calcWithdrawalUnderlyingCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  collateralizationRatio(): GToken__collateralizationRatioResult {
    let result = super.call(
      "collateralizationRatio",
      "collateralizationRatio():(uint256,uint256)",
      []
    );

    return new GToken__collateralizationRatioResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collateralizationRatio(): ethereum.CallResult<
    GToken__collateralizationRatioResult
  > {
    let result = super.tryCall(
      "collateralizationRatio",
      "collateralizationRatio():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__collateralizationRatioResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositFee(): BigInt {
    let result = super.call("depositFee", "depositFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositFee", "depositFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchange(): Address {
    let result = super.call("exchange", "exchange():(address)", []);

    return result[0].toAddress();
  }

  try_exchange(): ethereum.CallResult<Address> {
    let result = super.tryCall("exchange", "exchange():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  growthGulpRange(): GToken__growthGulpRangeResult {
    let result = super.call(
      "growthGulpRange",
      "growthGulpRange():(uint256,uint256)",
      []
    );

    return new GToken__growthGulpRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_growthGulpRange(): ethereum.CallResult<GToken__growthGulpRangeResult> {
    let result = super.tryCall(
      "growthGulpRange",
      "growthGulpRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__growthGulpRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  growthToken(): Address {
    let result = super.call("growthToken", "growthToken():(address)", []);

    return result[0].toAddress();
  }

  try_growthToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("growthToken", "growthToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lendingReserveUnderlying(): BigInt {
    let result = super.call(
      "lendingReserveUnderlying",
      "lendingReserveUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lendingReserveUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingReserveUnderlying",
      "lendingReserveUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPool(): Address {
    let result = super.call("liquidityPool", "liquidityPool():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPool",
      "liquidityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPoolBurningRate(): BigInt {
    let result = super.call(
      "liquidityPoolBurningRate",
      "liquidityPoolBurningRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolBurningRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolBurningRate",
      "liquidityPoolBurningRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPoolLastBurningTime(): BigInt {
    let result = super.call(
      "liquidityPoolLastBurningTime",
      "liquidityPoolLastBurningTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolLastBurningTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolLastBurningTime",
      "liquidityPoolLastBurningTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPoolMigrationRecipient(): Address {
    let result = super.call(
      "liquidityPoolMigrationRecipient",
      "liquidityPoolMigrationRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityPoolMigrationRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPoolMigrationRecipient",
      "liquidityPoolMigrationRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPoolMigrationUnlockTime(): BigInt {
    let result = super.call(
      "liquidityPoolMigrationUnlockTime",
      "liquidityPoolMigrationUnlockTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolMigrationUnlockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolMigrationUnlockTime",
      "liquidityPoolMigrationUnlockTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  miningGulpRange(): GToken__miningGulpRangeResult {
    let result = super.call(
      "miningGulpRange",
      "miningGulpRange():(uint256,uint256)",
      []
    );

    return new GToken__miningGulpRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_miningGulpRange(): ethereum.CallResult<GToken__miningGulpRangeResult> {
    let result = super.tryCall(
      "miningGulpRange",
      "miningGulpRange():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GToken__miningGulpRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  miningToken(): Address {
    let result = super.call("miningToken", "miningToken():(address)", []);

    return result[0].toAddress();
  }

  try_miningToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("miningToken", "miningToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveToken(): Address {
    let result = super.call("reserveToken", "reserveToken():(address)", []);

    return result[0].toAddress();
  }

  try_reserveToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserveToken", "reserveToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakesToken(): Address {
    let result = super.call("stakesToken", "stakesToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakesToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakesToken", "stakesToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalReserve(): BigInt {
    let result = super.call("totalReserve", "totalReserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalReserve", "totalReserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReserveUnderlying(): BigInt {
    let result = super.call(
      "totalReserveUnderlying",
      "totalReserveUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalReserveUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReserveUnderlying",
      "totalReserveUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlyingToken(): Address {
    let result = super.call(
      "underlyingToken",
      "underlyingToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingToken",
      "underlyingToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawalFee(): BigInt {
    let result = super.call("withdrawalFee", "withdrawalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalFee",
      "withdrawalFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateLiquidityPoolCall extends ethereum.Call {
  get inputs(): AllocateLiquidityPoolCall__Inputs {
    return new AllocateLiquidityPoolCall__Inputs(this);
  }

  get outputs(): AllocateLiquidityPoolCall__Outputs {
    return new AllocateLiquidityPoolCall__Outputs(this);
  }
}

export class AllocateLiquidityPoolCall__Inputs {
  _call: AllocateLiquidityPoolCall;

  constructor(call: AllocateLiquidityPoolCall) {
    this._call = call;
  }

  get _stakesAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AllocateLiquidityPoolCall__Outputs {
  _call: AllocateLiquidityPoolCall;

  constructor(call: AllocateLiquidityPoolCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnLiquidityPoolPortionCall extends ethereum.Call {
  get inputs(): BurnLiquidityPoolPortionCall__Inputs {
    return new BurnLiquidityPoolPortionCall__Inputs(this);
  }

  get outputs(): BurnLiquidityPoolPortionCall__Outputs {
    return new BurnLiquidityPoolPortionCall__Outputs(this);
  }
}

export class BurnLiquidityPoolPortionCall__Inputs {
  _call: BurnLiquidityPoolPortionCall;

  constructor(call: BurnLiquidityPoolPortionCall) {
    this._call = call;
  }
}

export class BurnLiquidityPoolPortionCall__Outputs {
  _call: BurnLiquidityPoolPortionCall;

  constructor(call: BurnLiquidityPoolPortionCall) {
    this._call = call;
  }
}

export class CallFunctionCall extends ethereum.Call {
  get inputs(): CallFunctionCall__Inputs {
    return new CallFunctionCall__Inputs(this);
  }

  get outputs(): CallFunctionCall__Outputs {
    return new CallFunctionCall__Outputs(this);
  }
}

export class CallFunctionCall__Inputs {
  _call: CallFunctionCall;

  constructor(call: CallFunctionCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): CallFunctionCall_accountStruct {
    return this._call.inputValues[1].value.toTuple() as CallFunctionCall_accountStruct;
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CallFunctionCall__Outputs {
  _call: CallFunctionCall;

  constructor(call: CallFunctionCall) {
    this._call = call;
  }
}

export class CallFunctionCall_accountStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get number(): BigInt {
    return this[1].toBigInt();
  }
}

export class CancelLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): CancelLiquidityPoolMigrationCall__Inputs {
    return new CancelLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): CancelLiquidityPoolMigrationCall__Outputs {
    return new CancelLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class CancelLiquidityPoolMigrationCall__Inputs {
  _call: CancelLiquidityPoolMigrationCall;

  constructor(call: CancelLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CancelLiquidityPoolMigrationCall__Outputs {
  _call: CancelLiquidityPoolMigrationCall;

  constructor(call: CancelLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CompleteLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): CompleteLiquidityPoolMigrationCall__Inputs {
    return new CompleteLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): CompleteLiquidityPoolMigrationCall__Outputs {
    return new CompleteLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class CompleteLiquidityPoolMigrationCall__Inputs {
  _call: CompleteLiquidityPoolMigrationCall;

  constructor(call: CompleteLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CompleteLiquidityPoolMigrationCall__Outputs {
  _call: CompleteLiquidityPoolMigrationCall;

  constructor(call: CompleteLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _cost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositUnderlyingCall extends ethereum.Call {
  get inputs(): DepositUnderlyingCall__Inputs {
    return new DepositUnderlyingCall__Inputs(this);
  }

  get outputs(): DepositUnderlyingCall__Outputs {
    return new DepositUnderlyingCall__Outputs(this);
  }
}

export class DepositUnderlyingCall__Inputs {
  _call: DepositUnderlyingCall;

  constructor(call: DepositUnderlyingCall) {
    this._call = call;
  }

  get _underlyingCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositUnderlyingCall__Outputs {
  _call: DepositUnderlyingCall;

  constructor(call: DepositUnderlyingCall) {
    this._call = call;
  }
}

export class ExecuteOperationCall extends ethereum.Call {
  get inputs(): ExecuteOperationCall__Inputs {
    return new ExecuteOperationCall__Inputs(this);
  }

  get outputs(): ExecuteOperationCall__Outputs {
    return new ExecuteOperationCall__Outputs(this);
  }
}

export class ExecuteOperationCall__Inputs {
  _call: ExecuteOperationCall;

  constructor(call: ExecuteOperationCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteOperationCall__Outputs {
  _call: ExecuteOperationCall;

  constructor(call: ExecuteOperationCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitiateLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): InitiateLiquidityPoolMigrationCall__Inputs {
    return new InitiateLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): InitiateLiquidityPoolMigrationCall__Outputs {
    return new InitiateLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class InitiateLiquidityPoolMigrationCall__Inputs {
  _call: InitiateLiquidityPoolMigrationCall;

  constructor(call: InitiateLiquidityPoolMigrationCall) {
    this._call = call;
  }

  get _migrationRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitiateLiquidityPoolMigrationCall__Outputs {
  _call: InitiateLiquidityPoolMigrationCall;

  constructor(call: InitiateLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCollateralizationRatioCall extends ethereum.Call {
  get inputs(): SetCollateralizationRatioCall__Inputs {
    return new SetCollateralizationRatioCall__Inputs(this);
  }

  get outputs(): SetCollateralizationRatioCall__Outputs {
    return new SetCollateralizationRatioCall__Outputs(this);
  }
}

export class SetCollateralizationRatioCall__Inputs {
  _call: SetCollateralizationRatioCall;

  constructor(call: SetCollateralizationRatioCall) {
    this._call = call;
  }

  get _collateralizationRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateralizationMargin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollateralizationRatioCall__Outputs {
  _call: SetCollateralizationRatioCall;

  constructor(call: SetCollateralizationRatioCall) {
    this._call = call;
  }
}

export class SetExchangeCall extends ethereum.Call {
  get inputs(): SetExchangeCall__Inputs {
    return new SetExchangeCall__Inputs(this);
  }

  get outputs(): SetExchangeCall__Outputs {
    return new SetExchangeCall__Outputs(this);
  }
}

export class SetExchangeCall__Inputs {
  _call: SetExchangeCall;

  constructor(call: SetExchangeCall) {
    this._call = call;
  }

  get _exchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExchangeCall__Outputs {
  _call: SetExchangeCall;

  constructor(call: SetExchangeCall) {
    this._call = call;
  }
}

export class SetGrowthGulpRangeCall extends ethereum.Call {
  get inputs(): SetGrowthGulpRangeCall__Inputs {
    return new SetGrowthGulpRangeCall__Inputs(this);
  }

  get outputs(): SetGrowthGulpRangeCall__Outputs {
    return new SetGrowthGulpRangeCall__Outputs(this);
  }
}

export class SetGrowthGulpRangeCall__Inputs {
  _call: SetGrowthGulpRangeCall;

  constructor(call: SetGrowthGulpRangeCall) {
    this._call = call;
  }

  get _growthMinGulpAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _growthMaxGulpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetGrowthGulpRangeCall__Outputs {
  _call: SetGrowthGulpRangeCall;

  constructor(call: SetGrowthGulpRangeCall) {
    this._call = call;
  }
}

export class SetLiquidityPoolBurningRateCall extends ethereum.Call {
  get inputs(): SetLiquidityPoolBurningRateCall__Inputs {
    return new SetLiquidityPoolBurningRateCall__Inputs(this);
  }

  get outputs(): SetLiquidityPoolBurningRateCall__Outputs {
    return new SetLiquidityPoolBurningRateCall__Outputs(this);
  }
}

export class SetLiquidityPoolBurningRateCall__Inputs {
  _call: SetLiquidityPoolBurningRateCall;

  constructor(call: SetLiquidityPoolBurningRateCall) {
    this._call = call;
  }

  get _burningRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidityPoolBurningRateCall__Outputs {
  _call: SetLiquidityPoolBurningRateCall;

  constructor(call: SetLiquidityPoolBurningRateCall) {
    this._call = call;
  }
}

export class SetMiningGulpRangeCall extends ethereum.Call {
  get inputs(): SetMiningGulpRangeCall__Inputs {
    return new SetMiningGulpRangeCall__Inputs(this);
  }

  get outputs(): SetMiningGulpRangeCall__Outputs {
    return new SetMiningGulpRangeCall__Outputs(this);
  }
}

export class SetMiningGulpRangeCall__Inputs {
  _call: SetMiningGulpRangeCall;

  constructor(call: SetMiningGulpRangeCall) {
    this._call = call;
  }

  get _miningMinGulpAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _miningMaxGulpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMiningGulpRangeCall__Outputs {
  _call: SetMiningGulpRangeCall;

  constructor(call: SetMiningGulpRangeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _grossShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawUnderlyingCall extends ethereum.Call {
  get inputs(): WithdrawUnderlyingCall__Inputs {
    return new WithdrawUnderlyingCall__Inputs(this);
  }

  get outputs(): WithdrawUnderlyingCall__Outputs {
    return new WithdrawUnderlyingCall__Outputs(this);
  }
}

export class WithdrawUnderlyingCall__Inputs {
  _call: WithdrawUnderlyingCall;

  constructor(call: WithdrawUnderlyingCall) {
    this._call = call;
  }

  get _grossShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawUnderlyingCall__Outputs {
  _call: WithdrawUnderlyingCall;

  constructor(call: WithdrawUnderlyingCall) {
    this._call = call;
  }
}
