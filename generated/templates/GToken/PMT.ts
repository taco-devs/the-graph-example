// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AnnounceTokenPercentTransfer extends ethereum.Event {
  get params(): AnnounceTokenPercentTransfer__Params {
    return new AnnounceTokenPercentTransfer__Params(this);
  }
}

export class AnnounceTokenPercentTransfer__Params {
  _event: AnnounceTokenPercentTransfer;

  constructor(event: AnnounceTokenPercentTransfer) {
    this._event = event;
  }

  get _sourceToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _targetToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _percent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurnLiquidityPoolPortion extends ethereum.Event {
  get params(): BurnLiquidityPoolPortion__Params {
    return new BurnLiquidityPoolPortion__Params(this);
  }
}

export class BurnLiquidityPoolPortion__Params {
  _event: BurnLiquidityPoolPortion;

  constructor(event: BurnLiquidityPoolPortion) {
    this._event = event;
  }

  get _stakesAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CancelLiquidityPoolMigration extends ethereum.Event {
  get params(): CancelLiquidityPoolMigration__Params {
    return new CancelLiquidityPoolMigration__Params(this);
  }
}

export class CancelLiquidityPoolMigration__Params {
  _event: CancelLiquidityPoolMigration;

  constructor(event: CancelLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangeTokenPercent extends ethereum.Event {
  get params(): ChangeTokenPercent__Params {
    return new ChangeTokenPercent__Params(this);
  }
}

export class ChangeTokenPercent__Params {
  _event: ChangeTokenPercent;

  constructor(event: ChangeTokenPercent) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _oldPercent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newPercent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CompleteLiquidityPoolMigration extends ethereum.Event {
  get params(): CompleteLiquidityPoolMigration__Params {
    return new CompleteLiquidityPoolMigration__Params(this);
  }
}

export class CompleteLiquidityPoolMigration__Params {
  _event: CompleteLiquidityPoolMigration;

  constructor(event: CompleteLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _stakesAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateLiquidityPoolMigration extends ethereum.Event {
  get params(): InitiateLiquidityPoolMigration__Params {
    return new InitiateLiquidityPoolMigration__Params(this);
  }
}

export class InitiateLiquidityPoolMigration__Params {
  _event: InitiateLiquidityPoolMigration;

  constructor(event: InitiateLiquidityPoolMigration) {
    this._event = event;
  }

  get _migrationRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class InsertToken extends ethereum.Event {
  get params(): InsertToken__Params {
    return new InsertToken__Params(this);
  }
}

export class InsertToken__Params {
  _event: InsertToken;

  constructor(event: InsertToken) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveToken extends ethereum.Event {
  get params(): RemoveToken__Params {
    return new RemoveToken__Params(this);
  }
}

export class RemoveToken__Params {
  _event: RemoveToken;

  constructor(event: RemoveToken) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferTokenPercent extends ethereum.Event {
  get params(): TransferTokenPercent__Params {
    return new TransferTokenPercent__Params(this);
  }
}

export class TransferTokenPercent__Params {
  _event: TransferTokenPercent;

  constructor(event: TransferTokenPercent) {
    this._event = event;
  }

  get _sourceToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _targetToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _percent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PMT__calcDepositCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PMT__calcDepositSharesFromCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PMT__calcWithdrawalCostFromSharesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PMT__calcWithdrawalSharesFromCostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PMT__getRebalanceMarginsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PMT extends ethereum.SmartContract {
  static bind(address: Address): PMT {
    return new PMT("PMT", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcDepositCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): PMT__calcDepositCostFromSharesResult {
    let result = super.call(
      "calcDepositCostFromShares",
      "calcDepositCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );

    return new PMT__calcDepositCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositCostFromShares(
    _netShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): ethereum.CallResult<PMT__calcDepositCostFromSharesResult> {
    let result = super.tryCall(
      "calcDepositCostFromShares",
      "calcDepositCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_netShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PMT__calcDepositCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcDepositSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): PMT__calcDepositSharesFromCostResult {
    let result = super.call(
      "calcDepositSharesFromCost",
      "calcDepositSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );

    return new PMT__calcDepositSharesFromCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcDepositSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _depositFee: BigInt
  ): ethereum.CallResult<PMT__calcDepositSharesFromCostResult> {
    let result = super.tryCall(
      "calcDepositSharesFromCost",
      "calcDepositSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_depositFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PMT__calcDepositSharesFromCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcWithdrawalCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): PMT__calcWithdrawalCostFromSharesResult {
    let result = super.call(
      "calcWithdrawalCostFromShares",
      "calcWithdrawalCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );

    return new PMT__calcWithdrawalCostFromSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalCostFromShares(
    _grossShares: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): ethereum.CallResult<PMT__calcWithdrawalCostFromSharesResult> {
    let result = super.tryCall(
      "calcWithdrawalCostFromShares",
      "calcWithdrawalCostFromShares(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_grossShares),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PMT__calcWithdrawalCostFromSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcWithdrawalSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): PMT__calcWithdrawalSharesFromCostResult {
    let result = super.call(
      "calcWithdrawalSharesFromCost",
      "calcWithdrawalSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );

    return new PMT__calcWithdrawalSharesFromCostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcWithdrawalSharesFromCost(
    _cost: BigInt,
    _totalReserve: BigInt,
    _totalSupply: BigInt,
    _withdrawalFee: BigInt
  ): ethereum.CallResult<PMT__calcWithdrawalSharesFromCostResult> {
    let result = super.tryCall(
      "calcWithdrawalSharesFromCost",
      "calcWithdrawalSharesFromCost(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_cost),
        ethereum.Value.fromUnsignedBigInt(_totalReserve),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_withdrawalFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PMT__calcWithdrawalSharesFromCostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositFee(): BigInt {
    let result = super.call("depositFee", "depositFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositFee", "depositFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRebalanceMargins(): PMT__getRebalanceMarginsResult {
    let result = super.call(
      "getRebalanceMargins",
      "getRebalanceMargins():(uint256,uint256)",
      []
    );

    return new PMT__getRebalanceMarginsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRebalanceMargins(): ethereum.CallResult<
    PMT__getRebalanceMarginsResult
  > {
    let result = super.tryCall(
      "getRebalanceMargins",
      "getRebalanceMargins():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PMT__getRebalanceMarginsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityPool(): Address {
    let result = super.call("liquidityPool", "liquidityPool():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPool",
      "liquidityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPoolBurningRate(): BigInt {
    let result = super.call(
      "liquidityPoolBurningRate",
      "liquidityPoolBurningRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolBurningRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolBurningRate",
      "liquidityPoolBurningRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPoolLastBurningTime(): BigInt {
    let result = super.call(
      "liquidityPoolLastBurningTime",
      "liquidityPoolLastBurningTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolLastBurningTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolLastBurningTime",
      "liquidityPoolLastBurningTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPoolMigrationRecipient(): Address {
    let result = super.call(
      "liquidityPoolMigrationRecipient",
      "liquidityPoolMigrationRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityPoolMigrationRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPoolMigrationRecipient",
      "liquidityPoolMigrationRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPoolMigrationUnlockTime(): BigInt {
    let result = super.call(
      "liquidityPoolMigrationUnlockTime",
      "liquidityPoolMigrationUnlockTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidityPoolMigrationUnlockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidityPoolMigrationUnlockTime",
      "liquidityPoolMigrationUnlockTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveToken(): Address {
    let result = super.call("reserveToken", "reserveToken():(address)", []);

    return result[0].toAddress();
  }

  try_reserveToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserveToken", "reserveToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakesToken(): Address {
    let result = super.call("stakesToken", "stakesToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakesToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakesToken", "stakesToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAt(_index: BigInt): Address {
    let result = super.call("tokenAt", "tokenAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toAddress();
  }

  try_tokenAt(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAt", "tokenAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCount(): BigInt {
    let result = super.call("tokenCount", "tokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCount", "tokenCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPercent(_token: Address): BigInt {
    let result = super.call("tokenPercent", "tokenPercent(address):(uint256)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBigInt();
  }

  try_tokenPercent(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenPercent",
      "tokenPercent(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReserve(): BigInt {
    let result = super.call("totalReserve", "totalReserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalReserve", "totalReserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawalFee(): BigInt {
    let result = super.call("withdrawalFee", "withdrawalFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdrawalFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawalFee",
      "withdrawalFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateLiquidityPoolCall extends ethereum.Call {
  get inputs(): AllocateLiquidityPoolCall__Inputs {
    return new AllocateLiquidityPoolCall__Inputs(this);
  }

  get outputs(): AllocateLiquidityPoolCall__Outputs {
    return new AllocateLiquidityPoolCall__Outputs(this);
  }
}

export class AllocateLiquidityPoolCall__Inputs {
  _call: AllocateLiquidityPoolCall;

  constructor(call: AllocateLiquidityPoolCall) {
    this._call = call;
  }

  get _stakesAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AllocateLiquidityPoolCall__Outputs {
  _call: AllocateLiquidityPoolCall;

  constructor(call: AllocateLiquidityPoolCall) {
    this._call = call;
  }
}

export class AnounceTokenPercentTransferCall extends ethereum.Call {
  get inputs(): AnounceTokenPercentTransferCall__Inputs {
    return new AnounceTokenPercentTransferCall__Inputs(this);
  }

  get outputs(): AnounceTokenPercentTransferCall__Outputs {
    return new AnounceTokenPercentTransferCall__Outputs(this);
  }
}

export class AnounceTokenPercentTransferCall__Inputs {
  _call: AnounceTokenPercentTransferCall;

  constructor(call: AnounceTokenPercentTransferCall) {
    this._call = call;
  }

  get _sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _targetToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _percent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AnounceTokenPercentTransferCall__Outputs {
  _call: AnounceTokenPercentTransferCall;

  constructor(call: AnounceTokenPercentTransferCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnLiquidityPoolPortionCall extends ethereum.Call {
  get inputs(): BurnLiquidityPoolPortionCall__Inputs {
    return new BurnLiquidityPoolPortionCall__Inputs(this);
  }

  get outputs(): BurnLiquidityPoolPortionCall__Outputs {
    return new BurnLiquidityPoolPortionCall__Outputs(this);
  }
}

export class BurnLiquidityPoolPortionCall__Inputs {
  _call: BurnLiquidityPoolPortionCall;

  constructor(call: BurnLiquidityPoolPortionCall) {
    this._call = call;
  }
}

export class BurnLiquidityPoolPortionCall__Outputs {
  _call: BurnLiquidityPoolPortionCall;

  constructor(call: BurnLiquidityPoolPortionCall) {
    this._call = call;
  }
}

export class CancelLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): CancelLiquidityPoolMigrationCall__Inputs {
    return new CancelLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): CancelLiquidityPoolMigrationCall__Outputs {
    return new CancelLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class CancelLiquidityPoolMigrationCall__Inputs {
  _call: CancelLiquidityPoolMigrationCall;

  constructor(call: CancelLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CancelLiquidityPoolMigrationCall__Outputs {
  _call: CancelLiquidityPoolMigrationCall;

  constructor(call: CancelLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CompleteLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): CompleteLiquidityPoolMigrationCall__Inputs {
    return new CompleteLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): CompleteLiquidityPoolMigrationCall__Outputs {
    return new CompleteLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class CompleteLiquidityPoolMigrationCall__Inputs {
  _call: CompleteLiquidityPoolMigrationCall;

  constructor(call: CompleteLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class CompleteLiquidityPoolMigrationCall__Outputs {
  _call: CompleteLiquidityPoolMigrationCall;

  constructor(call: CompleteLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _cost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitiateLiquidityPoolMigrationCall extends ethereum.Call {
  get inputs(): InitiateLiquidityPoolMigrationCall__Inputs {
    return new InitiateLiquidityPoolMigrationCall__Inputs(this);
  }

  get outputs(): InitiateLiquidityPoolMigrationCall__Outputs {
    return new InitiateLiquidityPoolMigrationCall__Outputs(this);
  }
}

export class InitiateLiquidityPoolMigrationCall__Inputs {
  _call: InitiateLiquidityPoolMigrationCall;

  constructor(call: InitiateLiquidityPoolMigrationCall) {
    this._call = call;
  }

  get _migrationRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitiateLiquidityPoolMigrationCall__Outputs {
  _call: InitiateLiquidityPoolMigrationCall;

  constructor(call: InitiateLiquidityPoolMigrationCall) {
    this._call = call;
  }
}

export class InsertTokenCall extends ethereum.Call {
  get inputs(): InsertTokenCall__Inputs {
    return new InsertTokenCall__Inputs(this);
  }

  get outputs(): InsertTokenCall__Outputs {
    return new InsertTokenCall__Outputs(this);
  }
}

export class InsertTokenCall__Inputs {
  _call: InsertTokenCall;

  constructor(call: InsertTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InsertTokenCall__Outputs {
  _call: InsertTokenCall;

  constructor(call: InsertTokenCall) {
    this._call = call;
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetLiquidityPoolBurningRateCall extends ethereum.Call {
  get inputs(): SetLiquidityPoolBurningRateCall__Inputs {
    return new SetLiquidityPoolBurningRateCall__Inputs(this);
  }

  get outputs(): SetLiquidityPoolBurningRateCall__Outputs {
    return new SetLiquidityPoolBurningRateCall__Outputs(this);
  }
}

export class SetLiquidityPoolBurningRateCall__Inputs {
  _call: SetLiquidityPoolBurningRateCall;

  constructor(call: SetLiquidityPoolBurningRateCall) {
    this._call = call;
  }

  get _burningRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidityPoolBurningRateCall__Outputs {
  _call: SetLiquidityPoolBurningRateCall;

  constructor(call: SetLiquidityPoolBurningRateCall) {
    this._call = call;
  }
}

export class SetRebalanceMarginsCall extends ethereum.Call {
  get inputs(): SetRebalanceMarginsCall__Inputs {
    return new SetRebalanceMarginsCall__Inputs(this);
  }

  get outputs(): SetRebalanceMarginsCall__Outputs {
    return new SetRebalanceMarginsCall__Outputs(this);
  }
}

export class SetRebalanceMarginsCall__Inputs {
  _call: SetRebalanceMarginsCall;

  constructor(call: SetRebalanceMarginsCall) {
    this._call = call;
  }

  get _liquidRebalanceMargin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _portfolioRebalanceMargin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRebalanceMarginsCall__Outputs {
  _call: SetRebalanceMarginsCall;

  constructor(call: SetRebalanceMarginsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferTokenPercentCall extends ethereum.Call {
  get inputs(): TransferTokenPercentCall__Inputs {
    return new TransferTokenPercentCall__Inputs(this);
  }

  get outputs(): TransferTokenPercentCall__Outputs {
    return new TransferTokenPercentCall__Outputs(this);
  }
}

export class TransferTokenPercentCall__Inputs {
  _call: TransferTokenPercentCall;

  constructor(call: TransferTokenPercentCall) {
    this._call = call;
  }

  get _sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _targetToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _percent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferTokenPercentCall__Outputs {
  _call: TransferTokenPercentCall;

  constructor(call: TransferTokenPercentCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _grossShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
